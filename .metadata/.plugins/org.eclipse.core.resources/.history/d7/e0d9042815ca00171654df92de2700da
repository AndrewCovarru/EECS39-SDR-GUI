package windowBuilder.views;
import java.util.ArrayList;
import java.util.List;


public enum Parameters {
	ATAN_MATH("ATAN_MATH"), 
	DEVICE_INDEX("DEVICE_INDEX"),
	ENABLE_OPTION("ENABLE_OPTION"),
	FIR_SIZE("FIR_SIZE"),
    FREQUENCY("FREQUENCY"), 
    MODULATION_MODE("MODULATION_MODE"), 
    OVERSAMPLING("OVERSAMPLING"),
    PPM_ERROR("PPM_ERROR"),
    RESAMPLE_RATE("RESAMPLE_RATE"),
    SAMPLE_RATE("SAMPLE_RATE"),
    SCANNABLE_FREQUENCY("SCANNABLE_FREQUENCY"),
    SQUELCH_DELAY("SQUELCH_DELAY"),
    SQUELCH_LEVEL("SQUELCH_LEVEL"), 
    TUNER_GAIN("TUNER_GAIN"), 
    VOLUME("VOLUME");
	
	
	public static final String DEFAULT_SPECIFIER = "default";
	
    private final String FUNCTION;
    private final List<String> values;

    private Object uiElement;
    private Class uiElementSpecificType;
    
    private Parameters(final String function)
    {
        this.FUNCTION = function;
        values = new ArrayList<>();
    }

    public void append(String val)
    {
        values.add(val);
    }
    
    public synchronized void setUIMembers(Object uiElement, Class uiElementSpecificType) {
    	this.uiElement = uiElement;
    	this.uiElementSpecificType = uiElementSpecificType; 
    }
    
    public synchronized void updateField(Class homeScreen, final String newVal) {
    	if(uiElementSpecificType.equals(javax.swing.JFormattedTextField.class)) {
    		
    	}
    	
    	if(uiElementSpecificType.equals(javax.swing.JRadioButton.class)) {
    		
    	}
    	
    	if(uiElementSpecificType.equals(javax.swing.JComboBox.class)){
    		
    	}
    	
    	if(uiElementSpecificType.equals(javax.swing.JSlider.class)) {
    		
    	}
    	
    }
    	

    public boolean remove(String val)
    {
        return values.remove(val);
    }

    public void resetValues()
    {
        values.clear();
    }

    public String getByIndex(int idx)
    {
        return values.get(idx);
    }

    public boolean isIndexValid(int idx)
    {
        if (idx < 0)
        {
            return false;
        }

        if (idx < values.size())
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    //if indx doesnt exist, write the val and return true
    public boolean replaceIndex(int idx, String val)
    {
        if (!isIndexValid(idx))
        {
            return false;
        }
        else
        {
            values.set(idx, val);
            return true;
        }
    }

    public List<String> getValues()
    {
        return new ArrayList<>(values);
    }

    public List<String> getDameonCallableStrings(){
        List<String> dameonStrings = new ArrayList<>();
        for(String s : values){
            dameonStrings.add(FUNCTION + "=" + s);
        }
        return dameonStrings;
    }
}